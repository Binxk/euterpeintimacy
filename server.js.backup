require('dotenv').config(); // This must be first!
const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const multer = require('multer');
const User = require('./models/User');
const path = require('path');
const app = express();

// Debug middleware to log all requests
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    console.log('Session:', req.session);
    next();
});

// Environment variables test route
app.get('/test-env', (req, res) => {
    console.log('Testing environment variables...');
    res.json({
        mongoDBConnected: !!mongoose.connection.db,
        mongoDBState: mongoose.connection.readyState,
        nodeEnv: process.env.NODE_ENV,
        port: process.env.PORT,
        mongoURIExists: !!process.env.MONGODB_URI,
        sessionSecretExists: !!process.env.SESSION_SECRET,
        mongoDBHost: process.env.MONGODB_URI ? process.env.MONGODB_URI.split('@')[1].split('/')[0] : null
    });
});

// File upload configuration
const storage = multer.diskStorage({
    destination: 'public/uploads/',
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});

const upload = multer({
    storage,
    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
    fileFilter: (req, file, cb) => {
        const allowedTypes = /jpeg|jpg|png|gif/;
        const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
        const mimetype = allowedTypes.test(file.mimetype);
        if (extname && mimetype) {
            return cb(null, true);
        }
        cb(new Error('Only image files are allowed!'));
    }
});

// Middleware setup
app.use(express.json());
app.use(express.static('public'));

// MongoDB connection with enhanced error handling
console.log('Attempting MongoDB connection...');
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    retryWrites: true
})
.then(() => {
    console.log('MongoDB connected successfully to:', 
        process.env.MONGODB_URI.split('@')[1].split('/')[0]); // Logs the host without credentials
})
.catch(err => {
    console.error('MongoDB connection error:', err.message);
    console.error('Connection details:', {
        uri: process.env.MONGODB_URI ? 'Set' : 'Not set',
        nodeEnv: process.env.NODE_ENV
    });
});

// Session store setup with debugging
const sessionStore = MongoStore.create({ 
    mongoUrl: process.env.MONGODB_URI,
    ttl: 24 * 60 * 60,
    autoRemove: 'native',
    touchAfter: 24 * 3600,
    crypto: {
        secret: process.env.SESSION_SECRET
    }
});

sessionStore.on('create', (sessionId) => {
    console.log('New session created:', sessionId);
});

sessionStore.on('touch', (sessionId) => {
    console.log('Session touched:', sessionId);
});

sessionStore.on('destroy', (sessionId) => {
    console.log('Session destroyed:', sessionId);
});

// Session configuration
app.use(session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    store: sessionStore,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000 // 24 hours
    },
    name: 'sessionId'
}));

// Login route with debugging
app.post('/login', async (req, res) => {
    console.log('Login attempt received:', {
        username: req.body.username,
        hasPassword: !!req.body.password,
        mongoDBState: mongoose.connection.readyState
    });

    try {
        const { username, password } = req.body;
        const user = await User.findOne({ username });
        
        if (!user || !(await bcrypt.compare(password, user.password))) {
            console.log('Login failed: Invalid credentials');
            return res.status(401).json({ error: 'Invalid credentials' });
        }

        req.session.userId = user._id;
        req.session.user = {
            id: user._id,
            username: user.username
        };
        
        req.session.save((err) => {
            if (err) {
                console.error('Session save error:', err);
                return res.status(500).json({ error: 'Error creating session' });
            }
            console.log('Login successful:', username);
            res.json({ success: true, user: { username: user.username } });
        });
    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ error: error.message });
    }
});

// Other existing routes...
app.post('/signup', async (req, res) => {
    console.log('Signup attempt received');
    try {
        const { username, password } = req.body;
        
        if (!username || !password) {
            return res.status(400).json({ error: 'Username and password are required' });
        }

        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.status(400).json({ error: 'Username already exists' });
        }

        const user = new User({ username, password });
        await user.save();

        req.session.userId = user._id;
        req.session.user = {
            id: user._id,
            username: user.username
        };

        req.session.save((err) => {
            if (err) {
                return res.status(500).json({ error: 'Error creating session' });
            }
            res.json({ 
                success: true, 
                user: { 
                    username: user.username,
                    id: user._id 
                }
            });
        });

    } catch (error) {
        console.error('Signup error:', error);
        res.status(500).json({ error: error.message });
    }
});

app.get('/check-session', (req, res) => {
    console.log('Session check:', {
        sessionExists: !!req.session,
        userId: req.session?.userId,
        username: req.session?.user?.username
    });
    
    if (req.session && req.session.userId) {
        res.json({ authenticated: true });
    } else {
        res.json({ authenticated: false });
    }
});

app.post('/logout', (req, res) => {
    console.log('Logout requested');
    req.session.destroy(err => {
        if (err) {
            console.error('Logout error:', err);
            return res.status(500).json({ error: 'Could not log out' });
        }
        res.json({ success: true });
    });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Error:', err);
    res.status(500).json({ error: 'Internal server error' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT} in ${process.env.NODE_ENV || 'development'} mode`);
    console.log('Environment variables loaded:', {
        port: process.env.PORT ? 'Set' : 'Not set',
        nodeEnv: process.env.NODE_ENV ? 'Set' : 'Not set',
        mongoUri: process.env.MONGODB_URI ? 'Set' : 'Not set',
        sessionSecret: process.env.SESSION_SECRET ? 'Set' : 'Not set'
    });
});
